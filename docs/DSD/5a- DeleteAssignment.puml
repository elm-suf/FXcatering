@startuml
skinparam defaultTextAlignment center
skinparam SequenceMessageAlign center

title delete assignment
Actor Chef as ch
participant "AppM.eventManager:\nEventManager" as EventManager
participant "AppM.userManager:\n UserManager" as UserManager

ch ->  EventManager: deleteAssignment(task:Task)
activate EventManager
	EventManager -> UserManager: getCurrentUser()
  	activate UserManager
      UserManager --> EventManager: user
  	deactivate UserManager

   	alt !user.isChef()
    	ch <--x EventManager: UseCaseLogicException
    else !(currentEvent == null &&\n currentEvent.chef != user &&\n !currentEvent.tasks.contains(task))
        ch <--x EventManager: AssignTaskException
    else

participant "AppM.eventManager.\ncurrentEvent.tasks:\n List<Task>" as tasks
participant "task :\n Task" as task

    	EventManager -> tasks: remove(task)
        activate tasks
        deactivate tasks

        EventManager -> task: setAssigned(false)
        activate task
        	EventManager -> task: setCook(null)
        deactivate task

        EventManager -> tasks: add(task)
            activate tasks
            deactivate tasks
        loop for r in receivers
           participant "receiver:\n CATEventReceiver" as r
          EventManager -> r : notifyAssignmentDeleted(task)
          activate r
          deactivate r
       end

		deactivate EventManager
	end


@enduml


